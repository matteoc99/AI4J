package botGUI;


import agent.Agent;
import agent.cosi.CosiAgent;
import botGUI.bot.Body;
import botGUI.bot.Bot;
import botGUI.bot.DragAndDropListener;
import botGUI.bot.Sensor;
import network.Network;
import network_gui.NetworkContainer;
import network_gui.NetworkGUI;
import network_gui.NetworkPanel;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.TimeUnit;

/**
 * Created by mcosi on 14/06/2017.
 */
public class World extends JFrame {

    /**
     * Progress:
     * //Not moving just eating right
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, 0.6844919792635216, -0.8815563835806783, 0.8366726626957082, 0.513609204198668, -0.2821573479171733, 0.4212738263432767, 0.08677812546795494, 0.6782329802716156, -0.7337196207934054, 0.755186126485867, -0.99977648810462, -0.794064297237844, -0.544172756123267, -0.16917514632281416, -0.1405048839660452, 0.9777085552451599, 0.846177254130644, -0.9252196849497967, -0.10779546209563429, 0.3013528163904198, 0.5824677656803721, 0.4759159260143171, 0.10851475896028329, -0.9725768134226627, 0.7596844924483495, 0.09899522707464103, 0.49112292957862635, 0.2275207755619204, 0.44800225391847337, -0.006304120036128902, 0.8933284816995337, -0.07818742708642357, 0.9074440539969661, -0.3646967995020196, -0.13795411907247312, 0.7821083299315332, -0.33718307563959904, 0.004077417569595454, -0.47355324421593403, 0.7387785522951686, -0.6850372802373526, -0.05650759339808431, -0.32075343082336594, -0.015749773084802632, -0.7680606840210422, -0.4667532525843334, 0.22647736861459244, -0.007229628236233854}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * <p>
     * <p>
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.6844919792635216, -0.8815563835806783, 0.8366726626957082, 0.513609204198668, -0.2821573479171733, 0.4212738263432767, 0.08677812546795494, 0.6782329802716156, -0.7337196207934054, 0.755186126485867, -0.99977648810462, -0.794064297237844, -0.544172756123267, -0.16917514632281416, -0.1405048839660452, 0.9777085552451599, 0.846177254130644, -0.9252196849497967, -0.10779546209563429, 0.3013528163904198, 0.5824677656803721, 0.4759159260143171, 0.10851475896028329, -0.9725768134226627, 0.7596844924483495, 0.09899522707464103, 0.49112292957862635, 0.2275207755619204, 0.44800225391847337, -0.006304120036128902, 0.8933284816995337, -0.07818742708642357, 0.9074440539969661, -0.3646967995020196, -0.13795411907247312, 0.7821083299315332, -0.33718307563959904, 0.004077417569595454, -0.47355324421593403, 0.7387785522951686, -0.6850372802373526, -0.05650759339808431, -0.32075343082336594, -0.015749773084802632, -0.7680606840210422, -0.4667532525843334, 0.22647736861459244, -0.007229628236233854}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * <p>
     * <p>
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * <p>
     * AGE 5 : {, 3.0, 5.0, 8.0, 3.0, 0.1627194548181652, 0.6142562841394916, -0.15167735471769395, -0.13449174273232867, -0.5894793390503703, -0.10831948623641674, 0.8378095417016462, 0.6857437956001737, -0.05120483967619194, 0.9007469251015088, -0.09355095515791345, -0.9115847693285959, -0.5777862129482267, 0.3229636991669462, 0.9960974436536036, 0.6742509672863726, -0.9137005267554399, 0.8192046671350268, 0.21046818182103677, -0.6107349305605014, 0.9726720945293148, -0.7176924916148473, 0.8640866393288564, -0.13574102760285123, 0.5360229309246729, -0.10119092014061537, 0.8822675446466788, -0.7701273651171288, -0.3589663232875344, -0.8363218852259762, 0.9386508908165183, 0.5246786829690571, -0.9927783197843381, 0.26729560264099916, -0.36715253600662345, -0.00454847118963464, -0.6980426384467595, 0.8618239824640077, 0.7392608432827525, 0.08288648427599532, -0.04333407556714275, -0.8855032260115021, -0.9008315404097644, 0.6926829189785886, 0.47849208654790676, 0.16825124266718627, 0.08165997884716503, -0.5289531477504446, 0.5394701152951897, 0.6555168610540298, 0.705046424565277, -0.7646915570047503, 0.4475092132871836, 0.7488635106010881, 0.4888698345393039, -0.5455086081006668, 0.7382683240811716, -0.6173969698929014, 0.897658174450652, 0.7313103632073044, 0.5742610705808284, 0.7423298538650667, -0.15891358086111929, 0.6062154566295526, -0.6027033756407989, 0.8947753122281754, 0.11121974641263987, -0.31425936736262927, 0.852627949670222, 0.5182424549860574, -0.13396894734623155, -0.908444169817584, 0.3879451307636037, -0.9057222846731059, -0.690599860256031}
     */
    public static double[][] theBests = {
            {4.0, 14.0, 15.0, 8.0, 4.0, -0.7275365291421605, -0.4358741799726731, -0.9993046963997814, 0.3175350419693277, -0.38623459534283855, -0.5856186081524521, 0.17892937655857422, -0.8860648950340522, -0.7418570127825457, -0.37165088520993494, -0.7040188651333634, 0.4695925913253376, 0.20893774625231765, -0.8357561942955587, -0.4924909341809889, 0.5232764861247923, -0.3361212675349248, -0.8715306845708253, 0.9670228480053562, 0.4802778845379503, -0.6362866078759561, -0.7478604739439958, 0.12954773793038066, -0.747318329068406, -0.7086497736349451, 0.4808826241586084, 0.9549030202835338, 0.5718385339571546, -0.2149495820667262, -0.9943737516343774, 0.3251092017044588, 0.7532746107247972, 0.39678426999199656, 0.1577643602991401, 0.039265923227384425, -0.578772508098855, 0.15694656041640198, 0.2503100177035136, 0.8605709022120511, -0.8105466176585618, 0.2992025004343344, 0.6673410117065812, 0.2639788156201248, -0.45310012820601386, 0.9543143588878478, -0.7127512115183923, 0.7693264426605357, -0.9887050682953005, -0.16062268288260895, -0.32899643001446033, 0.043579039895256244, -0.009346116296423457, -0.4510294077754291, 0.3548531885768198, -0.6828193497008812, 0.7321601401932853, 0.6973081559933771, -0.9424261639051321, -0.9166801537409683, 0.23982829545501883, 0.8655525128459371, -0.3544030618666323, 0.5352493544517192, -0.8931884160104662, 0.07603069134282858, -0.7049632386916429, -0.2543724514990071, -0.16483148988045992, 0.34517329724594803, -0.5521510662494584, -0.796823351725571, 0.4053565130653731, -0.24042841781511815, 0.880050912468177, -0.004218122156021131, 0.6096744310132967, 0.47462934870168394, 0.48314038711973506, -0.33451791454047175, -0.02167256509579807, -0.9471384930463458, -0.794450067220478, -0.4403669820390024, -0.9962578098949604, 0.6389717376045208, -0.990821194700277, -0.6361499678599629, -0.19178697666710387, -0.38858186513735227, -0.3332526595962997, -0.5738331850186613, 0.40191215100775723, 0.5552543703344912, -0.24107867747450928, -0.5318258234402502, 0.24275157364924604, 0.6686127163876068, 0.3258568655458791, -0.6722687269157168, -0.06346403719215332, 0.0452716638626649, 0.28602064595455357, -0.5108307173477207, 0.6052998585294802, -0.3316683120299966, -0.04415845253677064, 0.3307367980782694, 0.7036752994243471, 0.4050975868450233, 0.7869550672636261, -0.7446372420396137, -0.12241064741856, -0.1891532501458404, -0.21649687846257293, 0.16964248000000515, 0.8365439133623787, -0.8707606042643337, -0.02984418259925281, 0.13727891180066099, -0.8498169772452355, 0.5197049760729597, -0.24777470963370973, -0.5429590483628124, -0.6181929756386935, 0.24721779257237642, 0.042443797550999696, -0.09837249447064367, 0.03594466737481494, -0.6625478080222589, 0.624682394117344, -0.5973455432639652, -0.5759512371690565, -0.9696135693689738, 0.3830886804988711, 0.078310439389919, -0.25816687815681205, 0.2580019382865366, -0.2541734772448738, 0.17405453068683352, -0.5962782667202076, 0.32680334396803756, -0.024197808072021543, -0.7769422841379838, -0.005665062001886323, 0.0034622288661350087, 0.786465673169799, -0.4680822066617414, 0.0738900881808986, 0.28196631807655526, -0.83102118083906, -0.041493997548032846, -0.48615359023504645, 0.2532329725650997, 0.2877447272201743, -0.12736951974890975, -0.9589207612938437, -0.29677464117917896, -0.1655041090094287, 0.17653220044307716, 0.23331880540983718, 0.33318628121436933, 0.326842732887227, 0.3110539587223371, -0.6644553492429175, -0.17431585723603682, -0.5046143050401024, -0.7153457750413073, -0.04352141200251758, -0.6272575403932237, -0.8758016013383427, 0.9362637803845899, 0.9562716755311713, -0.26259655785908365, -0.5073076642986152, 0.8793116561762155, 0.6509355455930825, -0.5623462345383443, -0.0874238938301577, 0.873075425682448, 0.8360197422203515, -0.7782813986932196, -0.2381743718361493, -0.27116107101910636, 0.07149089593136981, -0.35369113070366676, 0.8882856177604375, 0.28216790622284726, -0.8282772720297931, -0.7255161060004407, -0.7112757027962198, -0.5510567410383715, 0.9089580933776429, -0.2226296444695981, -0.43513249906609364, 0.931618991248746, 0.5655584899697783, -0.9459437296187359, -0.1838583732642991, -0.24649992365425621, 0.15980895424683172, 0.3765574347853571, -0.6504433732266266, 0.4726640735991807, 0.9219995387133804, 0.5218304738301351, 0.8703654573893056, 0.6634781508737957, -0.08804248461900088, 0.870386968664721, 0.662836971253135, 0.052490876783226836, -0.45384193917833504, 0.5311388262095058, 0.6786853331412754, -0.44319268667818057, -0.7580061602799932, -0.305314978319293, -0.5786008323876066, -0.6031170128936476, 0.3887370171436284, 0.622327527475617, 0.04791909820084417, -0.5579989986244229, -0.5808192052866519, 0.9456811028394043, 0.20481432179260395, -0.004475364005883664, 0.8829002712070539, -0.7181777233884148, 0.7743117893205322, -0.661653985976443, -0.8884742062095392, 0.5614981609167164, -0.07376396913567196, -0.47722116271680814, -0.6816254682784708, -0.07700423989559702, 0.6551188416890383, 0.14547249193483625, 0.7892405118363592, -0.45814945935947926, 0.32744308826185753, -0.8732481738346956, 0.19809455918425112, 0.34664917420225216, -0.32781347191648114, -0.11488416256369804, 0.020900430779447587, 0.2137625614799301, 0.11853566511768499, -0.2805439017308353, -0.47729455152712075, -0.06107938970893323, 0.4178419921649481, 0.6978839938866914, -0.14238252044190092, 0.05111985175131628, 0.08259710878838677, -0.09911537696304662, 0.44823354178378016, -0.6355671578433464, 0.3334051250415395, 0.47784172355614696, -0.9994625393399177, 0.05586629345707217, 0.9656345501953427, 0.6498085745839219, 0.262238725817477, 0.01249267391906006, -0.16936459405685844, 0.5277249312797119, 0.946975572204908, -0.7913408572995504, 0.4721095521010208, 0.41411134791276294, 0.12376108317996182, 0.9541545513182639, 0.8664254345909439, -0.8824025372449944, -0.1894982077310181, 0.9967944509355473, 0.18637280950812563, 0.7334711589678291, -0.48762661469701807, -0.33203882371683524, -0.9589458878073636, -0.6702374842183239, -0.9897107890937795, 0.527215486006239, -0.2596857613895389, -0.9727954357328188, -0.16834702200275364, -0.7078270815078804, 0.790312137420512, 0.072741704260473, -0.4749626701162468, -0.7675830512146293, 0.04754164591894128, -0.3199160414432354, 0.11238515788927095, -0.33870041657913674, -0.25818822407514497, -0.3528661016516239, 0.9067832814749175, 0.6770567455948577, -0.07560010486310986, -0.9410589565020131, 0.26080996662923717, -0.11525422075690117, 0.8057939124668152, -0.25383352174372065, 0.7499130608349793, -0.5269113662413412, 0.9181438081115407, 0.5928689235016429, -0.2027739044551644, 0.7253837848063003, -0.9292555216664438, 0.27375128899842793, 0.8106855593890097, -0.1887722164086847, -0.3374235060815347, 0.5498351942484914, 0.5302631570762093, -0.4641351518763699, -0.925866930595213, -0.13714169389085717, 0.47258177687941094, 0.6165617546101672, -0.41853376190228864, -0.3574809772638614, 0.11213600076581032, -0.9895169886803892, 0.5185862796671377, -0.5229811026953182, 0.7527917163804647, 0.8361195700238695, 0.2600542570459863, 0.09618403304956336, -0.07980771456519875, -0.48959741481445573, -0.9961922540183763, 0.977771675204602, 0.5451514144331999, 0.866211223372545, -0.6950345487941318, 0.31139992218913704, -0.7899328805697357, -0.7799371820606404, 0.8445579206389779, -0.9591370397990693, -0.7051572254792777, 0.6273502864710327, 0.012835311422570772, -0.2455746496896274, -0.014243825710054336, 0.8925715817004543, -0.4549937619396516, -0.6959849576953978, 0.800168521926859, -0.7054279729636193, 0.6679650376034336}
    };


    public enum Optimisation {
        MIN, MEDIUM, MAX
    }


    /**
     * describes the width and height of a World
     */
    public static int WORLD_WIDTH = 100;
    public static int WORLD_HEIGHT = 75;
    /**
     * from 1-1000 describes the amount of land in the World.
     * 1000 is the Maximum
     */
    public static int LAND_AMOUNT = 15;
    /**
     * The bigger the value the smaller the islands are
     */
    public static int LAND_SIZE = 6;
    /**
     * Describes the size of the World
     */
    public static int CHUNK_SIZE = 20;

    public static final int MAX_CHUNK_SIZE = 1024;
    /**
     * Describes the distribution of the food
     */
    public static int FOOD_DISTRIBUTION = 10;


    /**
     * Describes the speed of the Food regrowth
     * smaller value = faster
     */
    private static int FOOD_REGROWTH = 10;

    /**
     * describes how often Chunks are repainted 0-10
     * 0 very often
     * 1 slow
     */
    private static int CHUNK_REFRESH_TIME = 0;

    /**
     * Describes how smooth the Islands are
     * 0: smoothing off
     * 1: soft smoothing
     * 1<: strong smoothing
     * better <10
     */
    public static int SMOOTHING_FAKTOR = 2;

    /**
     * Describes the speed of the moving map
     */
    private static final int MOVE_SPEED = 40;


    //FPS control
    private static int FPS = 60;
    private long timeUntilSleep;
    private int fpsCounter;
    /**
     * The Map of {@link Chunk}s
     */
    public static Chunk[][] map = null;

    /**
     * The container of the World Container
     */
    public Container container;

    /**
     * tells if the Map has finished loading
     */
    private boolean mapLoaded = false;

    /**
     * Contains the World
     */
    public JPanel containerPanel = new JPanel();
    /**
     * Contains the Controls and Settings for the World
     */
    public JPanel controlPanel = new JPanel();

    /**
     * used to resize all at once
     */
    public int resizeCounter = 0;

    /**
     * describes the size of the control Panel
     */
    public int controlPanelWidth = 400;

    /**
     * describes the min Population size, if the value drops below a new {@link Bot} is created
     */
    public static int MIN_POP_SIZE = 0;

    /**
     * Contains the Population
     */
    public ArrayList<Bot> population = new ArrayList<>();

    /**
     * currently selected Bot
     */
    public Bot selectedBot = null;


    /**
     * Listener used to drag the map
     */
    public static DragAndDropListener listener;

    public static Optimisation performance = Optimisation.MIN;

    public static NetworkGUI networkGUI;

    public boolean pause = false;


    public World() {
        setTitle("World");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        CHUNK_SIZE = (int) ((screenSize.getWidth() - controlPanelWidth) / WORLD_WIDTH);
        setBounds(0, 0, screenSize.width, screenSize.height);
        setLocationRelativeTo(null);
        setExtendedState(MAXIMIZED_BOTH);

        networkGUI = new NetworkGUI();

        listener = new DragAndDropListener(this);

        container = getContentPane();
        container.setLayout(null);
        container.setBackground(Color.gray);

        containerPanel.setBounds(0, 0, WORLD_WIDTH * CHUNK_SIZE, WORLD_HEIGHT * CHUNK_SIZE);
        containerPanel.setLayout(null);

        controlPanel = addControls();

        containerPanel.addMouseListener(listener);
        containerPanel.addMouseMotionListener(listener);


        container.add(controlPanel);
        container.add(containerPanel);

        addControls();

        setVisible(true);

        createMap();

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_R:
                        if (population != null) {
                            for (int i = 0; i < population.size(); i++) {
                                Bot b = population.get(i);
                                b.kill();
                                population.remove(b);
                            }
                            population.clear();
                        }
                        createMap();
                        resizeMap();
                        break;

                    case KeyEvent.VK_UP:
                        containerPanel.setLocation(containerPanel.getX(), containerPanel.getY() - MOVE_SPEED);
                        break;
                    case KeyEvent.VK_DOWN:
                        containerPanel.setLocation(containerPanel.getX(), containerPanel.getY() + MOVE_SPEED);
                        break;
                    case KeyEvent.VK_LEFT:
                        containerPanel.setLocation(containerPanel.getX() - MOVE_SPEED, containerPanel.getY());
                        break;
                    case KeyEvent.VK_RIGHT:
                        containerPanel.setLocation(containerPanel.getX() + MOVE_SPEED, containerPanel.getY());
                        break;
                    case KeyEvent.VK_H:
                    case KeyEvent.VK_CONTROL:
                        Point p = MouseInfo.getPointerInfo().getLocation();
                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        screenSize.width -= controlPanelWidth;
                        int xOff = (int) (p.x - screenSize.getWidth() / 2);
                        int yOff = (int) (p.y - screenSize.getHeight() / 2);
                        containerPanel.setLocation(containerPanel.getX() + xOff / 8, containerPanel.getY() + yOff / 8);
                        break;
                    case KeyEvent.VK_L:
                        containerPanel.setLocation(0, 0);
                        break;
                    case KeyEvent.VK_P:
                        pause = !pause;
                        break;

                    //player steuerung for test
                    case KeyEvent.VK_W:
                        population.get(0).yDir = -2;

                        break;
                    case KeyEvent.VK_S:
                        population.get(0).yDir = +2;

                        break;
                    case KeyEvent.VK_A:
                        population.get(0).xDir = -2;

                        break;
                    case KeyEvent.VK_D:
                        population.get(0).xDir = +2;
                        break;
                    case KeyEvent.VK_E:
                        population.get(0).eat();

                        break;
                    case KeyEvent.VK_X:
                        population.get(0).rotateAndResize(-10);
                        break;
                    case KeyEvent.VK_C:
                        population.get(0).sensorRotation = 180;
                        population.get(0).rotateAndResize();
                        break;

                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_W:
                        population.get(0).yDir = 0;

                        break;
                    case KeyEvent.VK_S:
                        population.get(0).yDir = 0;

                        break;
                    case KeyEvent.VK_A:
                        population.get(0).xDir = 0;

                        break;
                    case KeyEvent.VK_D:
                        population.get(0).xDir = 0;

                        break;
                }
            }
        });

        dynamicResizer();

        addMouseWheelListener(new MouseAdapter() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                if (e.getWheelRotation() > 0) {
                    if (CHUNK_SIZE > 8) {
                        if (resizeCounter <= 0)
                            resizeCounter = 1;
                        CHUNK_SIZE -= e.getWheelRotation() * resizeCounter;
                        resizeCounter = 3;
                        if (performance == Optimisation.MAX)
                            resizeCounter *= 2;
                        if (CHUNK_SIZE <= 0)
                            CHUNK_SIZE = 1;
                    }
                } else {
                    if (CHUNK_SIZE < MAX_CHUNK_SIZE) {
                        if (resizeCounter <= 0)
                            resizeCounter = 1;
                        CHUNK_SIZE -= e.getWheelRotation() * resizeCounter;

                        resizeCounter = 3;
                        if (performance == Optimisation.MAX)
                            resizeCounter *= 2;

                    }
                }
            }

        });
        requestFocus();
    }

    public JPanel addBotStats(Bot b) {
        JPanel ret = new JPanel();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        ret.setBounds(screenSize.width - controlPanelWidth, 0, controlPanelWidth, screenSize.height - 400);
        ret.setBackground(Color.white);
        ret.setLayout(null);

        NetworkPanel con = new NetworkPanel(b.agent.getNet());


        JLabel[] labels = new JLabel[6];
        for (int i = 0; i < labels.length; i++) {
            labels[i] = new JLabel();
            labels[i].setBounds(20, 60 * i + 20, 300, 50);
            labels[i].setFont(new Font("Times New Roman", 0, 20));
            ret.add(labels[i]);
        }
        labels[0].setText("Health:" + b.hp);
        labels[1].setText("Age: " + b.age);
        labels[2].setText("Generation: " + b.generation);
        labels[3].setText("Color: " + b.red + " " + b.blue + " " + b.green);
        labels[3].setBackground(new Color(b.red, b.blue, b.green));
        labels[3].setOpaque(true);
        labels[4].setText("Cur. Color: " + b.body.getBodyColor().getRed() + " " + b.body.getBodyColor().getBlue() + " " + b.body.getBodyColor().getGreen());
        labels[4].setBackground(b.body.getBodyColor());
        labels[4].setOpaque(true);

        //(b.agent.getNet());
        //  con.setBounds(20,60*labels.length,350,300);
        ret.add(con);
        con.refresh();
        return ret;
    }


    /**
     * add all the Controls components on a JPanel
     */
    public JPanel addControls() {
        JPanel ret = new JPanel();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        ret.setBounds(screenSize.width - controlPanelWidth, 0, controlPanelWidth, getHeight());
        ret.setBackground(Color.white);
        ret.setLayout(null);

        JSlider w_width = new JSlider(JSlider.HORIZONTAL, 0, 300, WORLD_WIDTH);
        JSlider w_height = new JSlider(JSlider.HORIZONTAL, 0, 300, WORLD_HEIGHT);
        JSlider land_amount = new JSlider(JSlider.HORIZONTAL, 0, 300, LAND_AMOUNT);
        JSlider land_size = new JSlider(JSlider.HORIZONTAL, 0, 50, LAND_SIZE);
        JSlider fps = new JSlider(JSlider.HORIZONTAL, 0, 300, FPS);
        JSlider food_distrib = new JSlider(JSlider.HORIZONTAL, 0, 80, FOOD_DISTRIBUTION);
        JSlider food_regrowth = new JSlider(JSlider.HORIZONTAL, 0, 100, FOOD_REGROWTH);//bis hier min +1 weil
        JSlider populationSlider = new JSlider(JSlider.HORIZONTAL, 0, 200, MIN_POP_SIZE);
        JSlider smoothing = new JSlider(JSlider.HORIZONTAL, 0, 10, SMOOTHING_FAKTOR);


        int xOff = 150;

        JLabel[] labels = new JLabel[9];
        for (int i = 0; i < labels.length; i++) {
            labels[i] = new JLabel();
            labels[i].setBounds(20, (getHeight() / 12) * i, xOff - 10, getHeight() / 10);
            labels[i].setFont(new Font("Times New Roman", 0, 20));
            ret.add(labels[i]);
        }
        labels[0].setText("World Width");
        labels[1].setText("World Height");
        labels[2].setText("Land Amount");
        labels[3].setText("Land Size");
        labels[4].setText("FPS");
        labels[5].setText("Food Distrib.");
        labels[6].setText("Food Regrowth");
        labels[7].setText("Population");
        labels[8].setText("Smoothing");

        w_width.setBounds(xOff, 10, controlPanelWidth - xOff, getHeight() / 10);
        w_height.setBounds(xOff, 10 + (getHeight() / 12), controlPanelWidth - xOff, (getHeight() / 10));
        land_amount.setBounds(xOff, 10 + (getHeight() / 12) * 2, controlPanelWidth - xOff, getHeight() / 10);
        land_size.setBounds(xOff, 10 + (getHeight() / 12) * 3, controlPanelWidth - xOff, getHeight() / 10);
        fps.setBounds(xOff, 10 + (getHeight() / 12) * 4, controlPanelWidth - xOff, getHeight() / 10);
        food_distrib.setBounds(xOff, 10 + (getHeight() / 12) * 5, controlPanelWidth - xOff, getHeight() / 10);
        food_regrowth.setBounds(xOff, 10 + (getHeight() / 12) * 6, controlPanelWidth - xOff, getHeight() / 10);
        populationSlider.setBounds(xOff, 10 + (getHeight() / 12) * 7, controlPanelWidth - xOff, getHeight() / 10);
        smoothing.setBounds(xOff, 10 + (getHeight() / 12) * 8, controlPanelWidth - xOff, getHeight() / 10);

        w_width.setPaintLabels(true);
        w_height.setPaintLabels(true);
        land_amount.setPaintLabels(true);
        land_size.setPaintLabels(true);
        fps.setPaintLabels(true);
        food_distrib.setPaintLabels(true);
        food_regrowth.setPaintLabels(true);
        populationSlider.setPaintLabels(true);
        smoothing.setPaintLabels(true);

        w_width.setPaintTicks(true);
        w_height.setPaintTicks(true);
        land_amount.setPaintTicks(true);
        land_size.setPaintTicks(true);
        fps.setPaintTicks(true);
        food_distrib.setPaintTicks(true);
        food_regrowth.setPaintTicks(true);
        populationSlider.setPaintTicks(true);
        smoothing.setPaintTicks(true);

        w_width.setMajorTickSpacing(50);
        w_height.setMajorTickSpacing(50);
        land_amount.setMajorTickSpacing(50);
        land_size.setMajorTickSpacing(10);
        fps.setMajorTickSpacing(100);
        food_distrib.setMajorTickSpacing(20);
        food_regrowth.setMajorTickSpacing(10);
        populationSlider.setMajorTickSpacing(50);
        smoothing.setMajorTickSpacing(5);

        w_width.setMinorTickSpacing(10);
        w_height.setMinorTickSpacing(10);
        land_amount.setMinorTickSpacing(10);
        land_size.setMinorTickSpacing(2);
        fps.setMinorTickSpacing(20);
        food_distrib.setMinorTickSpacing(5);
        food_regrowth.setMinorTickSpacing(2);
        populationSlider.setMinorTickSpacing(10);
        smoothing.setMinorTickSpacing(1);


        w_width.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                WORLD_WIDTH = w_width.getValue() + 1;
                requestFocus();
            }
        });
        w_height.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                WORLD_HEIGHT = w_height.getValue() + 1;
                requestFocus();
            }
        });
        land_amount.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LAND_AMOUNT = land_amount.getValue() + 1;
                requestFocus();
            }
        });
        land_size.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LAND_SIZE = land_size.getValue() + 1;
                requestFocus();
            }
        });
        fps.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FPS = fps.getValue() + 1;
                requestFocus();
            }
        });
        food_distrib.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FOOD_DISTRIBUTION = food_distrib.getValue() + 1;
                requestFocus();
            }
        });
        food_regrowth.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FOOD_REGROWTH = food_regrowth.getValue() + 1;
                requestFocus();
            }
        });
        populationSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                MIN_POP_SIZE = populationSlider.getValue();
                requestFocus();
            }
        });
        smoothing.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                SMOOTHING_FAKTOR = smoothing.getValue();
                requestFocus();
            }
        });

        ret.add(w_width);
        ret.add(w_height);
        ret.add(land_amount);
        ret.add(land_size);
        ret.add(fps);
        ret.add(food_distrib);
        ret.add(food_regrowth);
        ret.add(populationSlider);
        ret.add(smoothing);

        JButton save = new JButton("SAVE");
        JButton load = new JButton("LOAD");

        save.setBounds(10, 10 + (getHeight() / 12) * 10, 180, 70);
        load.setBounds(200, 10 + (getHeight() / 12) * 10, 180, 70);

        ret.add(save);
        ret.add(load);

        save.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                save();
            }
        });
        load.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                load();
            }
        });
        return ret;
    }

    private void dynamicResizer() {
        new Thread(() -> {

            while (true) {
                try {
                    TimeUnit.MILLISECONDS.sleep(40);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                resizeCounter--;
                if (resizeCounter == 0) {
                    resizeCounter = 0;
                    resizeMap();
                }
                if (resizeCounter == Integer.MIN_VALUE)
                    resizeCounter = -1;
            }
        }).start();
    }

    /**
     * resizes the World to a given chunk size
     */
    private void resizeMap() {
        if (mapLoaded) {
            double prevWidth = containerPanel.getWidth();
            double prevHeight = containerPanel.getHeight();
            containerPanel.setSize(WORLD_WIDTH * CHUNK_SIZE, WORLD_HEIGHT * CHUNK_SIZE);
            prevWidth -= containerPanel.getWidth();
            prevHeight -= containerPanel.getHeight();
            containerPanel.setLocation(containerPanel.getX() + (int) (prevWidth / 2), containerPanel.getY() + (int) (prevHeight / 2));
            for (int i = 0; i < WORLD_WIDTH; i++) {
                for (int j = 0; j < WORLD_HEIGHT; j++) {
                    Chunk c = map[i][j];
                    c.resizeAndReposition();
                }
            }

            if (population != null)
                for (int i = 0; i < population.size(); i++) {
                    Bot b = population.get(i);
                    b.resizeAndRelocate();
                }
        }
    }

    /**
     * Method that creates a new Map
     */
    private void createMap() {
        mapLoaded = false;
        population.clear();
        map = new Chunk[WORLD_WIDTH][WORLD_HEIGHT];
        generateMap();

        //Uniformize map
        if (SMOOTHING_FAKTOR == 1) {
            uniformieze();
        } else {
            for (int i = 0; i < SMOOTHING_FAKTOR - 1; i++) {
                uniformieze();
                containerPanel.repaint();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                Chunk c = map[i][j];
                c.toUpdate = true;
                c.addMouseListener(listener);
                c.addMouseMotionListener(listener);
            }
        }
        mapLoaded = true;
    }

    @Override
    public void paint(Graphics g) {
        if (!pause) {
            //add Bots if necessary
            if (mapLoaded && population.size() < MIN_POP_SIZE) {
                Bot b = null;
           /* int neu = (int) (Math.random() * 4);
            int hiddAmm = (int) (Math.random() * 2);
            int[] hidd = new int[hiddAmm];
            for (int k = 0; k < hiddAmm; k++) {
                hidd[k] = (int) (Math.random() * 10 + 1);
            }*/
                /**
                 * 2 in 100
                 */
                int chanceToSpawnBest = -10;
                if (chanceToSpawnBest < Math.random() * 100) {
                    b = new Bot(new CosiAgent(new Network(14, 4, 1, new int[]{1})), this, 0);
                } else {
                    int pos = (int) (Math.random() * theBests.length);
                    b = new Bot(new CosiAgent(new Network(theBests[pos])), this, 0);
                    // System.out.println("A HERO ENTERED THE WORLD");
                }
                population.add(b);
                containerPanel.add(b, 0);
                //random Location
                int ranX = (int) (Math.random() * CHUNK_SIZE * WORLD_WIDTH);
                int ranY = (int) (Math.random() * CHUNK_SIZE * WORLD_HEIGHT);
                b.setLocation(ranX, ranY);
                while (!(b.getChunkUnder(ranX, ranY, b.body).getType() == Chunk.Type.LAND)) {
                    ranX = (int) (Math.random() * CHUNK_SIZE * WORLD_WIDTH);
                    ranY = (int) (Math.random() * CHUNK_SIZE * WORLD_HEIGHT);
                    b.setLocation(ranX, ranY);
                }
                final Bot bf = b;
                bf.addMouseListener(listener);
            }

            //refresh bot panel
            if (performance == Optimisation.MEDIUM || performance == Optimisation.MIN) {
                if (selectedBot != null) {
                    if (selectedBot.hp > 0) {
                        controlPanel.removeAll();
                        container.remove(controlPanel);
                        controlPanel = new JPanel();
                        controlPanel = addBotStats(selectedBot);
                        container.add(controlPanel, 0);
                    } else {
                        selectedBot = null;
                        controlPanel.removeAll();
                        container.remove(controlPanel);
                        controlPanel = new JPanel();
                        controlPanel = addControls();
                        container.add(controlPanel, 0);
                    }
                }
            }
            //FPS control
            timeUntilSleep = System.currentTimeMillis();
            if (fpsCounter > FPS * CHUNK_REFRESH_TIME + FOOD_REGROWTH)
                fpsCounter = 0;
            else
                fpsCounter++;

            //moving things
            if (mapLoaded) {
                Component[] components = containerPanel.getComponents();
                if (components != null && components.length > 0) {
                    for (Component c : components) {
                        if (c instanceof Chunk) {

                            if (fpsCounter == FPS * CHUNK_REFRESH_TIME)
                                ((Chunk) c).update();

                            if (fpsCounter % FOOD_REGROWTH == 0)
                                ((Chunk) c).updateFood();

                            if (performance == Optimisation.MAX)
                                CHUNK_REFRESH_TIME = 3;
                            else if (performance == Optimisation.MEDIUM)
                                CHUNK_REFRESH_TIME = 1;
                            else
                                CHUNK_REFRESH_TIME = 0;
                        }
                        if (c instanceof Bot) {
                            Bot b = (Bot) c;
                            b.move();
                        }
                    }
                }
            }
            super.paint(g);
            //sleep to match FPS
            long passedTime = System.currentTimeMillis() - timeUntilSleep;
            if (passedTime < 1000.0 / FPS) {
                try {
                    Thread.sleep((long) (1000.0 / FPS - passedTime));
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            repaint();
        }
    }

    /**
     * method used to generate the Map
     */
    private void generateMap() {
        containerPanel.removeAll();
        ArrayList<Island> islands = new ArrayList<>();
        //first fill with Water
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                try {
                    Chunk c = new Chunk(i, j);
                    c.setLocation(i * c.getWidth(), j * c.getHeight());
                    containerPanel.add(c);
                    map[i][j] = c;

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
                if (LAND_AMOUNT > (Math.random() * 1000)) {
                    islands.add(new Island(WORLD_WIDTH < WORLD_HEIGHT ? WORLD_WIDTH / LAND_SIZE : WORLD_HEIGHT / LAND_SIZE, i, j));
                }
            }
        }
        for (Island island : islands) {
            for (int i = 0; i < island.island.length; i++) {
                for (int j = 0; j < island.island[i].length; j++) {
                    if (island.island[i][j] == 1) {
                        int x = i + island.x;
                        int y = j + island.y;
                        if (x < WORLD_WIDTH && y < WORLD_HEIGHT && x >= 0 && y >= 0) {
                            Chunk c = map[x][y];
                            c.setType(Chunk.Type.LAND);
                        }
                    }
                }
            }
        }
        repaint();
    }

    /**
     * make uniform
     * if Water chunk has more Land arround than Water, transform to land.
     */
    public void uniformieze() {
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                //Count water vs land Neighbors
                Chunk c = map[i][j];
                int waterCount = 0;
                int landCount = 0;
                for (Chunk n : c.getNeighbors()) {
                    if (n.getType() == Chunk.Type.LAND)
                        landCount++;
                    else
                        waterCount++;
                }
                //valuate the  water vs land count
                if (c.getType() == Chunk.Type.LAND) {
                    if (SMOOTHING_FAKTOR != 1 ? landCount < waterCount : landCount == 0) {
                        c.setType(Chunk.Type.WATER);
                    }
                } else {
                    if (SMOOTHING_FAKTOR != 1 ? landCount > waterCount : waterCount == 0) {
                        c.setType(Chunk.Type.LAND);
                    }
                }
                c.update();
            }
        }
    }


    /**
     * Load a previous World
     */
    public void load() {

        File file = new File("C:\\EvoBots");
        // Reading directory contents
        File[] files = file.listFiles();
        String worlds[] = new String[files.length];
        for (int i = 0; i < files.length; i++) {
            worlds[i] = files[i].getName();
        }

        String selectedWorld = "";

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setCurrentDirectory(file);

        int n = fileChooser.showOpenDialog(World.this);
        if (n == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            selectedWorld = f.getName();


            containerPanel.removeAll();


            String path = "C:\\EvoBots\\" + selectedWorld;

            String data = "";

            BufferedReader br = null;
            try {
                br = new BufferedReader(
                        new InputStreamReader(new FileInputStream(path)));
                String line;
                while ((line = br.readLine()) != null) {
                    data += line;
                }
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            } catch (IOException e) {
                e.printStackTrace();
            }

            int indexOfSemiColum = data.indexOf(';');

            int[] setupData = new int[12];

            for (int i = 0; i < setupData.length; i++) {
                String subData = data.substring(0, indexOfSemiColum);
                setupData[i] = Integer.parseInt(subData);
                data = data.substring(indexOfSemiColum + 1);
                indexOfSemiColum = data.indexOf(';');
            }

            containerPanel.setLocation(setupData[0], setupData[1]);

            WORLD_WIDTH = setupData[2];
            WORLD_HEIGHT = setupData[3];
            LAND_AMOUNT = setupData[4];
            LAND_SIZE = setupData[5];
            CHUNK_SIZE = setupData[6];
            FOOD_DISTRIBUTION = setupData[7];
            FOOD_REGROWTH = setupData[8];
            SMOOTHING_FAKTOR = setupData[9];
            FPS = setupData[10];
            MIN_POP_SIZE = setupData[11];

            resizeMap();

       /* TODO performance
        subData = data.substring(0, indexOfSemiColum);
        performance
                indexOfSemiColum = data.indexOf(';');
 */
            data = data.substring(indexOfSemiColum + 1);
            indexOfSemiColum = data.indexOf(';');

            String subData;

            for (int i = 0; i < WORLD_WIDTH; i++) {
                for (int j = 0; j < WORLD_HEIGHT; j++) {
                    Chunk c = null;
                    try {
                        c = new Chunk(i, j);
                    } catch (ClassNotFoundException e) {
                        e.printStackTrace();
                    }

                    subData = data.substring(0, indexOfSemiColum);
                    int food = Integer.parseInt(subData);
                    data = data.substring(indexOfSemiColum + 1);
                    indexOfSemiColum = data.indexOf(';');


                    subData = data.substring(0, indexOfSemiColum);
                    data = data.substring(indexOfSemiColum + 1);
                    indexOfSemiColum = data.indexOf(';');
                    if (subData.equals("LAND"))
                        c.setType(Chunk.Type.LAND);
                    c.setFood(food);

                    c.setLocation(i * CHUNK_SIZE, j * CHUNK_SIZE);
                    map[i][j] = c;
                    containerPanel.add(c);
                }
            }
            subData = data.substring(0, indexOfSemiColum);
            int botCount = Integer.parseInt(subData);
            data = data.substring(indexOfSemiColum + 1);
            indexOfSemiColum = data.indexOf(';');
            //  System.out.println("bCount" + botCount);


            if (population != null) {
                for (int i = 0; i < population.size(); i++) {
                    Bot b = population.get(i);
                    b.kill();
                }
                population.clear();
            }

            for (int j = 0; j < botCount; j++) {
                Bot b = new Bot(null, null, 0);
                indexOfSemiColum = data.indexOf(';');

                int dat[] = new int[15];
                for (int k = 0; k < 15; k++) {
                    subData = data.substring(0, indexOfSemiColum);
                    dat[k] = Integer.parseInt(subData);
                    data = data.substring(indexOfSemiColum + 1);
                    indexOfSemiColum = data.indexOf(';');
                }
                int x, y;

                x = dat[0];
                y = dat[1];
                b.setLocation(x, y);
                b.age = dat[2];
                b.ageingCounter = dat[3];
                b.sensorRotation = dat[4];

                b.xDir = dat[5];
                b.yDir = dat[6];
                b.hp = dat[7];
                b.red = dat[8];
                b.blue = dat[9];

                b.green = dat[10];
                b.makeChildren = dat[11];
                b.generation = dat[12];
                b.memRefresh = dat[13];
                b.memRefreshCounter = dat[14];

                b.world = this;
                //memorie
                for (int k = 0; k < b.memorie.size(); k++) {
                    for (int l = 0; l < b.memorie.get(k).length; l++) {
                        subData = data.substring(0, indexOfSemiColum);
                        b.memorie.get(k)[l] = Double.parseDouble(subData);
                        data = data.substring(indexOfSemiColum + 1);
                        indexOfSemiColum = data.indexOf(';');
                    }
                }

                //agent
                data = data.replace('[', '{');
                data = data.replace(']', '}');

                //TODO in data bleiben 3 überflüssige werte übrig kp was läuft

                subData = data.substring(0, data.indexOf('}') + 1);
                b.agent = new CosiAgent(new Network(subData));

                b.addMouseListener(listener);

                networkGUI.addNetwork(b.agent.getNet());

                data = data.substring(data.indexOf('}') + 1);

                population.add(b);
                containerPanel.add(b, 0);
            }
            repaint();
            resizeMap();
            requestFocus();
        }
    }

    /**
     * Save the current state of the World
     */
    public void save() {

        File theDir = new File("C:\\EvoBots");
        if (!theDir.exists()) {
            try {
                theDir.mkdir();
            } catch (SecurityException se) {
                se.printStackTrace();
                System.out.println("ERROR SAVE");
            }

        }


        String data = "" + containerPanel.getX() + ";" + containerPanel.getY() + ";" + WORLD_WIDTH + ";" + WORLD_HEIGHT + ";" + LAND_AMOUNT + ";" + LAND_SIZE + ";" + CHUNK_SIZE + ";" + FOOD_DISTRIBUTION
                + ";" + FOOD_REGROWTH + ";" + SMOOTHING_FAKTOR + ";" + FPS + ";" + MIN_POP_SIZE + ";" + performance + ";";
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                Chunk c = map[i][j];
                data += "" + c.getFood() + ";" + c.getType() + ";";
            }
        }
        data += population.size() + ";";
        for (int i = 0; i < population.size(); i++) {
            Bot b = population.get(i);
            data += "" + b.getX() + ";" + b.getY() + ";" + b.age + ";" + b.ageingCounter + ";"
                    + b.sensorRotation + ";" + b.xDir + ";" + b.yDir + ";" + b.hp + ";"
                    + b.red + ";" + b.blue + ";" + b.green + ";" + b.makeChildren + ";"
                    + b.generation + ";" + b.memRefresh + ";" + b.memRefreshCounter + ";";
            for (int j = 0; j < b.memorie.size(); j++) {
                for (int k = 0; k < b.memorie.get(j).length; k++) {
                    data += b.memorie.get(j)[k] + ";";
                }
            }
            data += "" + Arrays.toString(b.agent.getNet().getDescriptor()) + "\n";
        }
        String path = JOptionPane.showInputDialog("Dateiname Angeben");
        try {
            PrintWriter writer = new PrintWriter("c:\\EvoBots\\" + path + ".txt", "UTF-8");
            writer.println(data);
            writer.close();
        } catch (IOException e) {
            System.out.println("ERROR SAVE 2");
        }
        requestFocus();
    }


    /**
     * start the World generation and in future also the simulation
     *
     * @param args
     */
    public static void main(String[] args) {
        new World();
    }

}
