package botGUI;


import agent.cosi.CosiAgent;
import botGUI.bot.Bot;
import botGUI.bot.DragAndDropListener;
import network.Network;
import network_gui.NetworkPanel;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.concurrent.TimeUnit;

/**
 * Created by mcosi on 14/06/2017.
 */
public class World extends JFrame {

    /**
     * Progress:
     * //Not moving just eating right
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, 0.6844919792635216, -0.8815563835806783, 0.8366726626957082, 0.513609204198668, -0.2821573479171733, 0.4212738263432767, 0.08677812546795494, 0.6782329802716156, -0.7337196207934054, 0.755186126485867, -0.99977648810462, -0.794064297237844, -0.544172756123267, -0.16917514632281416, -0.1405048839660452, 0.9777085552451599, 0.846177254130644, -0.9252196849497967, -0.10779546209563429, 0.3013528163904198, 0.5824677656803721, 0.4759159260143171, 0.10851475896028329, -0.9725768134226627, 0.7596844924483495, 0.09899522707464103, 0.49112292957862635, 0.2275207755619204, 0.44800225391847337, -0.006304120036128902, 0.8933284816995337, -0.07818742708642357, 0.9074440539969661, -0.3646967995020196, -0.13795411907247312, 0.7821083299315332, -0.33718307563959904, 0.004077417569595454, -0.47355324421593403, 0.7387785522951686, -0.6850372802373526, -0.05650759339808431, -0.32075343082336594, -0.015749773084802632, -0.7680606840210422, -0.4667532525843334, 0.22647736861459244, -0.007229628236233854}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * AGE 3 : {, 3.0, 5.0, 5.0, 3.0, -0.1492079084949982, -0.2622166191767852, 0.6070052109082742, -0.22046316859480775, -0.48760419355118123, 0.1411727860250649, -0.5176720571373936, -0.8404899871050742, 0.053713851863130824, -0.24396966412424037, 0.45377203152217227, -0.46703234527888915, 0.501212341418211, 0.9743618959663667, -0.5727149591433471, -0.22790901329853686, 0.9496827636255913, -0.30685958952247216, 0.9328423349466837, -0.11136853725495799, -0.4774184996017352, 0.9943554256759706, 0.8313087300925373, -0.8050438485356144, 0.9335829718839936, 0.05892059610557787, -0.7468408747644213, 0.3698806222829454, -0.6943428682346295, -0.6166517498542288, 0.4107210217942674, -0.5398885716756792, -0.6096893756982054, 0.4325520695988967, 0.6931798001269533, -0.5561758584919332, 0.8784590814435564, 0.48909404985770566, -0.7163348589834526, -0.8588936184573162, 0.10572539794659175, -0.35135762541225324, 0.4303156165480895, -0.023302524972154126, 0.12878823558110275, 0.6633625561085565, -0.5417026089457078, 0.38366035329414805}
     * <p>
     * <p>
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.6844919792635216, -0.8815563835806783, 0.8366726626957082, 0.513609204198668, -0.2821573479171733, 0.4212738263432767, 0.08677812546795494, 0.6782329802716156, -0.7337196207934054, 0.755186126485867, -0.99977648810462, -0.794064297237844, -0.544172756123267, -0.16917514632281416, -0.1405048839660452, 0.9777085552451599, 0.846177254130644, -0.9252196849497967, -0.10779546209563429, 0.3013528163904198, 0.5824677656803721, 0.4759159260143171, 0.10851475896028329, -0.9725768134226627, 0.7596844924483495, 0.09899522707464103, 0.49112292957862635, 0.2275207755619204, 0.44800225391847337, -0.006304120036128902, 0.8933284816995337, -0.07818742708642357, 0.9074440539969661, -0.3646967995020196, -0.13795411907247312, 0.7821083299315332, -0.33718307563959904, 0.004077417569595454, -0.47355324421593403, 0.7387785522951686, -0.6850372802373526, -0.05650759339808431, -0.32075343082336594, -0.015749773084802632, -0.7680606840210422, -0.4667532525843334, 0.22647736861459244, -0.007229628236233854}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, -0.1446412367306178, 0.3590817092487293, 0.6816074537182519, 0.9805139051024396, -0.9226367745852462, 0.08699579468309504, -0.07664168521434345, 0.9437444101552501, -0.6833528814797987, -0.963255817434947, 0.3254091824496166, -0.523327876867481, 0.2732223510211087, -0.8689592101136372, 0.9120955357517933, 0.9863833361331682, 0.8449593653948879, 0.003786879128242271, -0.09151965614713409, 0.924324829804803, -0.7751864515047091, 0.4829005274644389, -0.1436809091644966, 0.20789331398758715, -0.1883328887415383, 0.35925057391803183, -0.8022762290658396, 0.05999569216920708, 0.012972787590314505, -0.19252179737217734, 0.14006346331212804, 0.3442773718765326, -0.9962860459497918, 0.3889435856973671, 0.8832174017940289, -0.4305798929502209, 0.5550225308411971, -0.30601319451927944, 0.6203742965197432, 0.3941131749696678, -0.8428742390492963, -0.6298533598036391, 0.11614963736003125, 0.685004801250936, 0.8351204030462471, -0.4650665034753325, -0.8791285312240338, 0.9631443537533226}
     * <p>
     * <p>
     * AGE 4 : {, 3.0, 5.0, 5.0, 3.0, 0.8345977353988845, -0.4691391521908763, 0.9395255813877332, 0.14983209623143368, -0.05112224731725412, -0.8207403267392177, -0.39754759809475115, 0.418498806981626, 0.7207074494675654, -0.21379668374420846, 0.8235347189537536, 0.7399099487668421, 0.9273877322971396, -0.8039572049802077, -0.34982616369482744, -0.1713007726811009, -0.543425066553368, -0.20064636673356606, 0.9860895849958824, -0.8750433927977168, 0.39278905276929366, 0.45264520592138746, -0.008487826256452502, 0.6804915808098255, 0.28318423523875746, -0.8682704189259258, -0.3134076770760379, -0.3777079522078908, -0.36901754571999423, 0.3070927441737654, 0.690220174148614, -0.5206265980604425, -0.6768262230862307, 0.1409379955996488, -0.28410470167633806, -0.948210379449949, 0.9197914858213119, 0.7794003310183324, 0.6982446725789335, -0.04434395311058492, 0.5152710201467385, 0.2497587055601609, -0.7617626335889238, 0.4956128945453069, -0.7718929477157741, 0.7713003372046268, -0.5679012128287002, 0.09623511096172455}
     * <p>
     * AGE 5 : {, 3.0, 5.0, 8.0, 3.0, 0.1627194548181652, 0.6142562841394916, -0.15167735471769395, -0.13449174273232867, -0.5894793390503703, -0.10831948623641674, 0.8378095417016462, 0.6857437956001737, -0.05120483967619194, 0.9007469251015088, -0.09355095515791345, -0.9115847693285959, -0.5777862129482267, 0.3229636991669462, 0.9960974436536036, 0.6742509672863726, -0.9137005267554399, 0.8192046671350268, 0.21046818182103677, -0.6107349305605014, 0.9726720945293148, -0.7176924916148473, 0.8640866393288564, -0.13574102760285123, 0.5360229309246729, -0.10119092014061537, 0.8822675446466788, -0.7701273651171288, -0.3589663232875344, -0.8363218852259762, 0.9386508908165183, 0.5246786829690571, -0.9927783197843381, 0.26729560264099916, -0.36715253600662345, -0.00454847118963464, -0.6980426384467595, 0.8618239824640077, 0.7392608432827525, 0.08288648427599532, -0.04333407556714275, -0.8855032260115021, -0.9008315404097644, 0.6926829189785886, 0.47849208654790676, 0.16825124266718627, 0.08165997884716503, -0.5289531477504446, 0.5394701152951897, 0.6555168610540298, 0.705046424565277, -0.7646915570047503, 0.4475092132871836, 0.7488635106010881, 0.4888698345393039, -0.5455086081006668, 0.7382683240811716, -0.6173969698929014, 0.897658174450652, 0.7313103632073044, 0.5742610705808284, 0.7423298538650667, -0.15891358086111929, 0.6062154566295526, -0.6027033756407989, 0.8947753122281754, 0.11121974641263987, -0.31425936736262927, 0.852627949670222, 0.5182424549860574, -0.13396894734623155, -0.908444169817584, 0.3879451307636037, -0.9057222846731059, -0.690599860256031}
     */
    public static double[][] theBests = {{3.0, 5.0, 8.0, 3.0, 0.1627194548181652, 0.6142562841394916, -0.15167735471769395, -0.13449174273232867, -0.5894793390503703, -0.10831948623641674, 0.8378095417016462, 0.6857437956001737, -0.05120483967619194, 0.9007469251015088, -0.09355095515791345, -0.9115847693285959, -0.5777862129482267, 0.3229636991669462, 0.9960974436536036, 0.6742509672863726, -0.9137005267554399, 0.8192046671350268, 0.21046818182103677, -0.6107349305605014, 0.9726720945293148, -0.7176924916148473, 0.8640866393288564, -0.13574102760285123, 0.5360229309246729, -0.10119092014061537, 0.8822675446466788, -0.7701273651171288, -0.3589663232875344, -0.8363218852259762, 0.9386508908165183, 0.5246786829690571, -0.9927783197843381, 0.26729560264099916, -0.36715253600662345, -0.00454847118963464, -0.6980426384467595, 0.8618239824640077, 0.7392608432827525, 0.08288648427599532, -0.04333407556714275, -0.8855032260115021, -0.9008315404097644, 0.6926829189785886, 0.47849208654790676, 0.16825124266718627, 0.08165997884716503, -0.5289531477504446, 0.5394701152951897, 0.6555168610540298, 0.705046424565277, -0.7646915570047503, 0.4475092132871836, 0.7488635106010881, 0.4888698345393039, -0.5455086081006668, 0.7382683240811716, -0.6173969698929014, 0.897658174450652, 0.7313103632073044, 0.5742610705808284, 0.7423298538650667, -0.15891358086111929, 0.6062154566295526, -0.6027033756407989, 0.8947753122281754, 0.11121974641263987, -0.31425936736262927, 0.852627949670222, 0.5182424549860574, -0.13396894734623155, -0.908444169817584, 0.3879451307636037, -0.9057222846731059, -0.690599860256031}
    };


    /**
     * describes the width and height of a World
     */
    public static int WORLD_WIDTH = 100;
    public static int WORLD_HEIGHT = 75;
    /**
     * from 1-1000 describes the amount of land in the World.
     * 1000 is the Maximum
     */
    public static int LAND_AMOUNT = 15;
    /**
     * The bigger the value the smaller the islands are
     */
    public static int LAND_SIZE = 6;
    /**
     * Describes the size of the World
     */
    public static int CHUNK_SIZE = 20;

    public static final int MAX_CHUNK_SIZE = 1024;
    /**
     * Describes the distribution of the food
     */
    public static int FOOD_DISTRIBUTION = 10;


    /**
     * Describes the speed of the Food regrowth
     * smaller value = faster
     */
    private static int FOOD_REGROWTH = 10;

    /**
     * describes how often Chunks are repainted 0-10
     * 0 very often
     * 1 slow
     */
    private static int CHUNK_REFRESH_TIME = 0;

    /**
     * Describes how smooth the Islands are
     * 0: smoothing off
     * 1: soft smoothing
     * 1<: strong smoothing
     * better <10
     */
    public static int SMOOTHING_FAKTOR = 2;

    /**
     * Describes the speed of the moving map
     */
    private static final int MOVE_SPEED = 40;


    //FPS control
    private static int FPS = 60;
    private long timeUntilSleep;
    private int fpsCounter;
    /**
     * The Map of {@link Chunk}s
     */
    public static Chunk[][] map = null;

    /**
     * The container of the World Container
     */
    public Container container;

    /**
     * tells if the Map has finished loading
     */
    private boolean mapLoaded = false;

    /**
     * Contains the World
     */
    public JPanel containerPanel = new JPanel();
    /**
     * Contains the Controls and Settings for the World
     */
    public JPanel controlPanel = new JPanel();

    /**
     * used to resize all at once
     */
    public int resizeCounter = 0;

    /**
     * describes the size of the control Panel
     */
    public int controlPanelWidth = 400;

    /**
     * describes the min Population size, if the value drops below a new {@link Bot} is created
     */
    public static int MIN_POP_SIZE = 0;

    /**
     * Contains the Population
     */
    public ArrayList<Bot> population = new ArrayList<>();

    /**
     * currently selected Bot
     */
    public Bot selectedBot = null;

    public static DragAndDropListener listener;

    public World() {
        setTitle("World");
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        CHUNK_SIZE = (int) ((screenSize.getWidth() - controlPanelWidth) / WORLD_WIDTH);
        setBounds(0, 0, screenSize.width, screenSize.height);
        setLocationRelativeTo(null);
        setExtendedState(MAXIMIZED_BOTH);

        listener = new DragAndDropListener(this);

        container = getContentPane();
        container.setLayout(null);
        container.setBackground(Color.gray);

        containerPanel.setBounds(0, 0, WORLD_WIDTH * CHUNK_SIZE, WORLD_HEIGHT * CHUNK_SIZE);
        containerPanel.setLayout(null);

        controlPanel = addControls();

        containerPanel.addMouseListener(listener);
        containerPanel.addMouseMotionListener(listener);


        container.add(controlPanel);
        container.add(containerPanel);

        addControls();

        setVisible(true);

        createMap();

        addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_R:
                        if (population != null) {
                            for (int i = 0; i < population.size(); i++) {
                                Bot b = population.get(i);
                                b.kill();
                                population.remove(b);
                            }
                            population.clear();
                        }
                        createMap();
                        resizeMap();
                        break;

                    case KeyEvent.VK_UP:
                        containerPanel.setLocation(containerPanel.getX(), containerPanel.getY() - MOVE_SPEED);
                        break;
                    case KeyEvent.VK_DOWN:
                        containerPanel.setLocation(containerPanel.getX(), containerPanel.getY() + MOVE_SPEED);
                        break;
                    case KeyEvent.VK_LEFT:
                        containerPanel.setLocation(containerPanel.getX() - MOVE_SPEED, containerPanel.getY());
                        break;
                    case KeyEvent.VK_RIGHT:
                        containerPanel.setLocation(containerPanel.getX() + MOVE_SPEED, containerPanel.getY());
                        break;
                    case KeyEvent.VK_H:
                    case KeyEvent.VK_CONTROL:
                        Point p = MouseInfo.getPointerInfo().getLocation();
                        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
                        screenSize.width -= controlPanelWidth;
                        int xOff = (int) (p.x - screenSize.getWidth() / 2);
                        int yOff = (int) (p.y - screenSize.getHeight() / 2);
                        containerPanel.setLocation(containerPanel.getX() + xOff / 8, containerPanel.getY() + yOff / 8);
                        break;
                    case KeyEvent.VK_L:
                        containerPanel.setLocation(0, 0);
                        break;

                    //player steuerung for test
                    case KeyEvent.VK_W:
                        population.get(0).yDir = -2;

                        break;
                    case KeyEvent.VK_S:
                        population.get(0).yDir = +2;

                        break;
                    case KeyEvent.VK_A:
                        population.get(0).xDir = -2;

                        break;
                    case KeyEvent.VK_D:
                        population.get(0).xDir = +2;
                        break;
                    case KeyEvent.VK_E:
                        population.get(0).eat();

                        break;
                    case KeyEvent.VK_X:
                        population.get(0).rotateAndResize(-10);
                        break;
                    case KeyEvent.VK_C:
                        population.get(0).sensorRotation = 180;
                        population.get(0).rotateAndResize();
                        break;

                }
            }

            @Override
            public void keyReleased(KeyEvent e) {
                switch (e.getKeyCode()) {
                    case KeyEvent.VK_W:
                        population.get(0).yDir = 0;

                        break;
                    case KeyEvent.VK_S:
                        population.get(0).yDir = 0;

                        break;
                    case KeyEvent.VK_A:
                        population.get(0).xDir = 0;

                        break;
                    case KeyEvent.VK_D:
                        population.get(0).xDir = 0;

                        break;
                }
            }
        });

        dynamicResizer();

        addMouseWheelListener(new MouseAdapter() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                if (e.getWheelRotation() > 0) {
                    if (CHUNK_SIZE > 8) {
                        if (resizeCounter <= 0)
                            resizeCounter = 1;
                        CHUNK_SIZE -= e.getWheelRotation() * resizeCounter;
                        resizeCounter = 3;
                        if (CHUNK_SIZE <= 0)
                            CHUNK_SIZE = 1;
                    }
                } else {
                    if (CHUNK_SIZE < MAX_CHUNK_SIZE) {
                        if (resizeCounter <= 0)
                            resizeCounter = 1;
                        CHUNK_SIZE -= e.getWheelRotation() * resizeCounter;

                        resizeCounter = 3;
                    }
                }
            }

        });
        requestFocus();
    }

    public JPanel addBotStats(Bot b) {
        JPanel ret = new JPanel();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        ret.setBounds(screenSize.width - controlPanelWidth, 0, controlPanelWidth, screenSize.height - 500);
        ret.setBackground(Color.white);
        ret.setLayout(null);

//        NetworkPanel p = new NetworkPanel(b.agent.getNet());
        //TODO add network panel to controls

        JLabel[] labels = new JLabel[6];
        for (int i = 0; i < labels.length; i++) {
            labels[i] = new JLabel();
            labels[i].setBounds(20, 60 * i + 20, 300, 50);
            labels[i].setFont(new Font("Times New Roman", 0, 20));
            ret.add(labels[i]);
        }
        labels[0].setText("Health:" + b.hp);
        labels[1].setText("Age: " + b.age);
        labels[2].setText("Generation: " + b.generation);
        labels[3].setText("Color: " + b.red + " " + b.blue + " " + b.green);
        labels[3].setBackground(new Color(b.red, b.blue, b.green));
        labels[3].setOpaque(true);
        labels[4].setText("Cur. Color: " + b.body.getBodyColor().getRed() + " " + b.body.getBodyColor().getBlue() + " " + b.body.getBodyColor().getGreen());
        labels[4].setBackground(b.body.getBodyColor());
        labels[4].setOpaque(true);


        return ret;
    }


    /**
     * add all the Controls components on a JPanel
     */
    public JPanel addControls() {
        JPanel ret = new JPanel();
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        ret.setBounds(screenSize.width - controlPanelWidth, 0, controlPanelWidth, getHeight());
        ret.setBackground(Color.white);
        ret.setLayout(null);

        JSlider w_width = new JSlider(JSlider.HORIZONTAL, 0, 300, WORLD_WIDTH);
        JSlider w_height = new JSlider(JSlider.HORIZONTAL, 0, 300, WORLD_HEIGHT);
        JSlider land_amount = new JSlider(JSlider.HORIZONTAL, 0, 300, LAND_AMOUNT);
        JSlider land_size = new JSlider(JSlider.HORIZONTAL, 0, 50, LAND_SIZE);
        JSlider fps = new JSlider(JSlider.HORIZONTAL, 0, 300, FPS);
        JSlider food_distrib = new JSlider(JSlider.HORIZONTAL, 0, 80, FOOD_DISTRIBUTION);
        JSlider food_regrowth = new JSlider(JSlider.HORIZONTAL, 0, 100, FOOD_REGROWTH);//bis hier min +1 weil
        JSlider populationSlider = new JSlider(JSlider.HORIZONTAL, 0, 200, MIN_POP_SIZE);
        JSlider smoothing = new JSlider(JSlider.HORIZONTAL, 0, 10, SMOOTHING_FAKTOR);


        int xOff = 150;

        JLabel[] labels = new JLabel[9];
        for (int i = 0; i < labels.length; i++) {
            labels[i] = new JLabel();
            labels[i].setBounds(20, (getHeight() / 10) * i, xOff - 10, getHeight() / 10);
            labels[i].setFont(new Font("Times New Roman", 0, 20));
            ret.add(labels[i]);
        }
        labels[0].setText("World Width");
        labels[1].setText("World Height");
        labels[2].setText("Land Amount");
        labels[3].setText("Land Size");
        labels[4].setText("FPS");
        labels[5].setText("Food Distrib.");
        labels[6].setText("Food Regrowth");
        labels[7].setText("Population");
        labels[8].setText("Smoothing");

        w_width.setBounds(xOff, 10, controlPanelWidth - xOff, getHeight() / 10);
        w_height.setBounds(xOff, 10 + (getHeight() / 10), controlPanelWidth - xOff, (getHeight() / 10));
        land_amount.setBounds(xOff, 10 + (getHeight() / 10) * 2, controlPanelWidth - xOff, getHeight() / 10);
        land_size.setBounds(xOff, 10 + (getHeight() / 10) * 3, controlPanelWidth - xOff, getHeight() / 10);
        fps.setBounds(xOff, 10 + (getHeight() / 10) * 4, controlPanelWidth - xOff, getHeight() / 10);
        food_distrib.setBounds(xOff, 10 + (getHeight() / 10) * 5, controlPanelWidth - xOff, getHeight() / 10);
        food_regrowth.setBounds(xOff, 10 + (getHeight() / 10) * 6, controlPanelWidth - xOff, getHeight() / 10);
        populationSlider.setBounds(xOff, 10 + (getHeight() / 10) * 7, controlPanelWidth - xOff, getHeight() / 10);
        smoothing.setBounds(xOff, 10 + (getHeight() / 10) * 8, controlPanelWidth - xOff, getHeight() / 10);

        w_width.setPaintLabels(true);
        w_height.setPaintLabels(true);
        land_amount.setPaintLabels(true);
        land_size.setPaintLabels(true);
        fps.setPaintLabels(true);
        food_distrib.setPaintLabels(true);
        food_regrowth.setPaintLabels(true);
        populationSlider.setPaintLabels(true);
        smoothing.setPaintLabels(true);

        w_width.setPaintTicks(true);
        w_height.setPaintTicks(true);
        land_amount.setPaintTicks(true);
        land_size.setPaintTicks(true);
        fps.setPaintTicks(true);
        food_distrib.setPaintTicks(true);
        food_regrowth.setPaintTicks(true);
        populationSlider.setPaintTicks(true);
        smoothing.setPaintTicks(true);

        w_width.setMajorTickSpacing(50);
        w_height.setMajorTickSpacing(50);
        land_amount.setMajorTickSpacing(50);
        land_size.setMajorTickSpacing(10);
        fps.setMajorTickSpacing(100);
        food_distrib.setMajorTickSpacing(20);
        food_regrowth.setMajorTickSpacing(10);
        populationSlider.setMajorTickSpacing(50);
        smoothing.setMajorTickSpacing(5);

        w_width.setMinorTickSpacing(10);
        w_height.setMinorTickSpacing(10);
        land_amount.setMinorTickSpacing(10);
        land_size.setMinorTickSpacing(2);
        fps.setMinorTickSpacing(20);
        food_distrib.setMinorTickSpacing(5);
        food_regrowth.setMinorTickSpacing(2);
        populationSlider.setMinorTickSpacing(10);
        smoothing.setMinorTickSpacing(1);


        w_width.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                WORLD_WIDTH = w_width.getValue() + 1;
                requestFocus();
            }
        });
        w_height.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                WORLD_HEIGHT = w_height.getValue() + 1;
                requestFocus();
            }
        });
        land_amount.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LAND_AMOUNT = land_amount.getValue() + 1;
                requestFocus();
            }
        });
        land_size.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                LAND_SIZE = land_size.getValue() + 1;
                requestFocus();
            }
        });
        fps.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FPS = fps.getValue() + 1;
                requestFocus();
            }
        });
        food_distrib.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FOOD_DISTRIBUTION = food_distrib.getValue() + 1;
                requestFocus();
            }
        });
        food_regrowth.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                FOOD_REGROWTH = food_regrowth.getValue() + 1;
                requestFocus();
            }
        });
        populationSlider.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                MIN_POP_SIZE = populationSlider.getValue();
                requestFocus();
            }
        });
        smoothing.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                SMOOTHING_FAKTOR = smoothing.getValue();
                requestFocus();
            }
        });

        ret.add(w_width);
        ret.add(w_height);
        ret.add(land_amount);
        ret.add(land_size);
        ret.add(fps);
        ret.add(food_distrib);
        ret.add(food_regrowth);
        ret.add(populationSlider);
        ret.add(smoothing);
        return ret;
    }

    private void dynamicResizer() {
        new Thread(() -> {

            while (true) {
                try {
                    TimeUnit.MILLISECONDS.sleep(40);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                resizeCounter--;
                if (resizeCounter == 0) {
                    resizeCounter = 0;
                    resizeMap();
                    //TODO Bot resize  resizeMap();
                }
                if (resizeCounter == Integer.MIN_VALUE)
                    resizeCounter = -1;
            }
        }).start();
    }

    /**
     * resizes the World to a given chunk size
     */
    private void resizeMap() {
        if (mapLoaded) {
            double prevWidth = containerPanel.getWidth();
            double prevHeight = containerPanel.getHeight();
            containerPanel.setSize(WORLD_WIDTH * CHUNK_SIZE, WORLD_HEIGHT * CHUNK_SIZE);
            prevWidth -= containerPanel.getWidth();
            prevHeight -= containerPanel.getHeight();
            containerPanel.setLocation(containerPanel.getX() + (int) (prevWidth / 2), containerPanel.getY() + (int) (prevHeight / 2));
            for (int i = 0; i < WORLD_WIDTH; i++) {
                for (int j = 0; j < WORLD_HEIGHT; j++) {
                    Chunk c = map[i][j];
                    c.resizeAndReposition();
                }
            }

            if (population != null)
                for (int i = 0; i < population.size(); i++) {
                    Bot b = population.get(i);
                    b.resizeAndRelocate();
                }
        }
    }

    /**
     * Method that creates a new Map
     */
    private void createMap() {
        mapLoaded = false;
        population.clear();
        map = new Chunk[WORLD_WIDTH][WORLD_HEIGHT];
        generateMap();

        //Uniformize map
        if (SMOOTHING_FAKTOR == 1) {
            uniformieze();
        } else {
            for (int i = 0; i < SMOOTHING_FAKTOR - 1; i++) {
                uniformieze();
                containerPanel.repaint();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                Chunk c = map[i][j];
                c.toUpdate = true;
                c.addMouseListener(listener);
                c.addMouseMotionListener(listener);
            }
        }
        mapLoaded = true;
    }

    @Override
    public void paint(Graphics g) {
        //add Bots if necessary
        if (mapLoaded && population.size() < MIN_POP_SIZE) {
            Bot b = null;
           /* int neu = (int) (Math.random() * 4);
            int hiddAmm = (int) (Math.random() * 2);
            int[] hidd = new int[hiddAmm];
            for (int k = 0; k < hiddAmm; k++) {
                hidd[k] = (int) (Math.random() * 10 + 1);
            }*/
            /**
             * 2 in 100
             */
            int chanceToSpawnBest = -10;
            if (chanceToSpawnBest < Math.random() * 100) {
                b = new Bot(new CosiAgent(Network.createDFF(5, 3, 1, 8)), this, 0);
            } else {
                int pos = (int) (Math.random() * theBests.length);
                b = new Bot(new CosiAgent(new Network(theBests[pos])), this, 0);
                // System.out.println("A HERO ENTERED THE WORLD");
            }
            population.add(b);
            containerPanel.add(b, 0);
            //random Location
            int ranX = (int) (Math.random() * CHUNK_SIZE * WORLD_WIDTH);
            int ranY = (int) (Math.random() * CHUNK_SIZE * WORLD_HEIGHT);
            b.setLocation(ranX, ranY);
            while (!(b.getChunkUnder(ranX, ranY, b.body).getType() == Chunk.Type.LAND)) {
                ranX = (int) (Math.random() * CHUNK_SIZE * WORLD_WIDTH);
                ranY = (int) (Math.random() * CHUNK_SIZE * WORLD_HEIGHT);
                b.setLocation(ranX, ranY);
            }
            final Bot bf = b;
            bf.addMouseListener(listener);
        }

        //refresh bot panel
        if (selectedBot != null) {
            if (selectedBot.hp > 0) {
                controlPanel.removeAll();
                container.remove(controlPanel);
                controlPanel = new JPanel();
                controlPanel = addBotStats(selectedBot);
                container.add(controlPanel, 0);
            } else {
                selectedBot = null;
                controlPanel.removeAll();
                container.remove(controlPanel);
                controlPanel = new JPanel();
                controlPanel = addControls();
                container.add(controlPanel, 0);
            }
        }
        //FPS control
        timeUntilSleep = System.currentTimeMillis();
        if (fpsCounter > FPS * CHUNK_REFRESH_TIME + FOOD_REGROWTH)
            fpsCounter = 0;
        else
            fpsCounter++;

        //moving things
        if (mapLoaded) {
            Component[] components = containerPanel.getComponents();
            if (components != null && components.length > 0) {
                for (Component c : components) {
                    if (c instanceof Chunk) {
                        if (fpsCounter == FPS * CHUNK_REFRESH_TIME)
                            ((Chunk) c).update();
                        else if (fpsCounter % FOOD_REGROWTH == 0)
                            ((Chunk) c).updateFood();
                    }
                    if (c instanceof Bot) {
                        Bot b = (Bot) c;
                        b.move();
                    }
                }
            }
        }
        super.paint(g);
        //sleep to match FPS
        long passedTime = System.currentTimeMillis() - timeUntilSleep;
        if (passedTime < 1000.0 / FPS) {
            try {
                Thread.sleep((long) (1000.0 / FPS - passedTime));
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
        repaint();
    }

    /**
     * method used to generate the Map
     */
    private void generateMap() {
        containerPanel.removeAll();
        ArrayList<Island> islands = new ArrayList<>();
        //first fill with Water
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                try {
                    Chunk c = new Chunk(i, j);
                    c.setLocation(i * c.getWidth(), j * c.getHeight());
                    containerPanel.add(c);
                    map[i][j] = c;

                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
                if (LAND_AMOUNT > (Math.random() * 1000)) {
                    islands.add(new Island(WORLD_WIDTH < WORLD_HEIGHT ? WORLD_WIDTH / LAND_SIZE : WORLD_HEIGHT / LAND_SIZE, i, j));
                }
            }
        }
        for (Island island : islands) {
            for (int i = 0; i < island.island.length; i++) {
                for (int j = 0; j < island.island[i].length; j++) {
                    if (island.island[i][j] == 1) {
                        int x = i + island.x;
                        int y = j + island.y;
                        if (x < WORLD_WIDTH && y < WORLD_HEIGHT && x >= 0 && y >= 0) {
                            Chunk c = map[x][y];
                            c.setType(Chunk.Type.LAND);
                        }
                    }
                }
            }
        }
        repaint();
    }

    /**
     * make uniform
     * if Water chunk has more Land arround than Water, transform to land.
     */
    public void uniformieze() {
        for (int i = 0; i < WORLD_WIDTH; i++) {
            for (int j = 0; j < WORLD_HEIGHT; j++) {
                //Count water vs land Neighbors
                Chunk c = map[i][j];
                int waterCount = 0;
                int landCount = 0;
                for (Chunk n : c.getNeighbors()) {
                    if (n.getType() == Chunk.Type.LAND)
                        landCount++;
                    else
                        waterCount++;
                }
                //valuate the  water vs land count
                if (c.getType() == Chunk.Type.LAND) {
                    if (SMOOTHING_FAKTOR != 1 ? landCount < waterCount : landCount == 0) {
                        c.setType(Chunk.Type.WATER);
                    }
                } else {
                    if (SMOOTHING_FAKTOR != 1 ? landCount > waterCount : waterCount == 0) {
                        c.setType(Chunk.Type.LAND);
                    }
                }
                c.update();
            }
        }
    }


    /**
     * Save the current state of the World
     */
    public void save() {

    }


    /**
     * Load a previous World
     */
    public void load() {

    }


    /**
     * start the World generation and in future also the simulation
     *
     * @param args
     */
    public static void main(String[] args) {
        new World();
    }

}
